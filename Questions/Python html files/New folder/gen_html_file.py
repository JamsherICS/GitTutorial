file_names = [
    "python_intro",
    "python2_python3",
    "installing",
    "pep8",
    "variable",
    "commenting",
    "indentation",
    "basic_data_types",
    "initializing_variable",
    "lists_tuples",
    "accessing_list",
    "dictionary",
    "defining_function",
    "equal_is_operators",
    "for_loop",
    "if_statement",
    "range_function",
    "what_is_module",
    "importing_module",
    "python_package",
    "handling_exceptions",
    "try_except_block",
    "with_statement",
    "reading_from_file",
    "writing_to_file",
    "what_is_class",
    "creating_object_of_class",
    "methods",
    "inheritance",
    "defining_constructor",
    "types_of_method_arguments",
    "handling_default_arguments",
    "what_is_lambda_function",
    "purpose_of_map_function",
    "sorting_list",
    "list_comprehension",
    "filter_function",
    "reversing_string",
    "what_is_set",
    "del_keyword",
    "tuple_unpacking",
    "check_key_dictionary",
    "append_extend_methods",
    "convert_string_to_lowercase",
    "generator",
    "yield_keyword",
    "virtual_environment",
    "pass_statement",
    "get_current_date_time",
    "enumerate_function",
    "shallow_deep_copy",
    "single_except_block",
    "decorators",
    "create_and_use_decorators",
    "super_function",
    "context_managers",
    "create_context_manager",
    "namespace",
    "global_keyword",
    "list_slicing_and_how_to_use_them",
    "iterate_multiple_lists",
    "zip_function",
    "docstring",
    "write_multi_line_docstrings",
    "assert_statement",
    "debug_python_code",
    "logging_module",
    "use_logging",
    "regular_expressions",
    "use_regular_expressions",
    "re_module",
    "work_with_json_data",
    "iterators_and_iterables",
    "create_custom_iterators",
    "next_function",
    "generators",
    "create_and_use_generators",
    "yield_from_statement",
    "decorator_factory",
    "create_decorator_factory",
    "functools_module",
    "use_functools",
    "closures",
    "create_and_use_closures",
    "nonlocal_keyword",
    "command_line_arguments",
    "command_line_arguments",
    "parse_command_line_arguments",
    "argparse_module",
    "use_argparse",
    "collections_module",
    "use_named_tuples",
    "defaultdict_class",
    "use_defaultdict",
    "counter_class",
    "use_counter",
    "sets_and_frozen_sets",
    "use_sets_and_frozen_sets",
    "heapq_module",
    "use_heapq",
    "metaclasses",
    "create_and_use_metaclasses",
    "inspect_module",
    "use_inspect_module",
    "descriptors",
    "create_and_use_descriptors",
    "asyncio_module",
    "asynchronous_asyncio",
    "context_variables",
    "work_with_context_variables",
    "dataclasses_module",
    "use_dataclasses",
    "type_hinting",
    "use_type_hinting",
    "typing_module",
    "use_typing_module",
    "abstract_base_classes",
    "create_and_use_abstract_base_classes",
    "async_and_await_keywords",
    "async_and_await",
    "coroutines",
    "create_and_use_coroutines",
    "concurrent_futures_module",
    "use_concurrent_futures",
    "monkey_patching",
    "perform_monkey_patching",
    "getattr_and_setattr_methods",
    "use_getattr_and_setattr_methods",
    "metaprogramming_and_reflection",
    "metaprogramming_and_reflection",
    "functools_wraps_function",
    "use_functools_wraps",
    "exec_and_eval_functions",
    "use_exec_and_eval",
    "subprocess_module",
    "use_subprocess_module",
    "method_resolution_order",
    "method_resolution_order",
    "slots_attribute",
    "use_slots_attribute",
    "method_overloading",
    "achieve_method_overloading",
    "multiprocessing_module",
    "use_multiprocessing_module",
    "global_interpreter_lock",
    "impact_of_gil_multithreading",
    "pickle_module",
    "object_serialization",
    "context_variables",
    "work_context_variables"
]


for index, name in enumerate(file_names, start=1):
    file_name = f"{index}_p_{name}.html"
    with open(file_name, "w") as file:
        file.write(f"<!DOCTYPE html>\n<html>\n<head>\n<title>{file_name}</title>\n</head>\n<body>\n<h1>{file_name}</h1>\n</body>\n</html>")
        print(f"Created file: {file_name}")
